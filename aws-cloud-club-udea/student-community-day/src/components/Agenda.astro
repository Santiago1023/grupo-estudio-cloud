---
import { getCurrentLanguage, t } from '../i18n/utils';

const lang = getCurrentLanguage(Astro.url);

const response = await fetch('https://sessionize.com/api/v2/u33lk5c0/view/Sessions');
const rooms = await response.json();

function formatTime(dateString: string) {
  return new Date(dateString).toLocaleTimeString('es-CO', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });
}

function getTrack(categories: any[]) {
  const trackCategory = categories.find(cat => cat.name === 'Â¿En quÃ© track o categorÃ­a encaja tu charla?');
  return trackCategory?.categoryItems[0]?.name || '';
}

function getLevel(categories: any[]) {
  const levelCategory = categories.find(cat => cat.name === 'Nivel tÃ©cnico del contenido');
  return levelCategory?.categoryItems[0]?.name || '';
}
---

<section id="agenda" class="agenda">
  <div class="container">
    <h2>{t(lang, 'agenda.title')}</h2>
    
    <div class="tabs">
      {rooms.map((room: any, index: number) => (
        <button 
          class={`tab ${index === 0 ? 'active' : ''}`} 
          data-room={room.groupId}
        >
          {room.groupName}
        </button>
      ))}
    </div>

    <div class="tab-content">
      {rooms.map((room: any, index: number) => (
        <div class={`tab-panel ${index === 0 ? 'active' : ''}`} data-room={room.groupId}>
          <div class="sessions">
            {room.sessions.map((session: any) => (
              <div class="session-card">
                <div class="session-time">
                  {formatTime(session.startsAt)} - {formatTime(session.endsAt)}
                </div>
                <div class="session-content">
                  <h3>{session.title}</h3>
                  {session.description && (
                    <p class="description">{session.description}</p>
                  )}
                  <div class="session-meta">
                    <div class="speakers">
                      <strong>Speakers:</strong> {session.speakers.map((s: any) => s.name).join(', ')}
                    </div>
                    <div class="tags">
                      <span class="tag track">{getTrack(session.categories)}</span>
                      <span class="tag level">{getLevel(session.categories)}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('.agenda .tab');
    const panels = document.querySelectorAll('.agenda .tab-panel');

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const roomId = tab.getAttribute('data-room');
        
        tabs.forEach(t => t.classList.remove('active'));
        panels.forEach(p => p.classList.remove('active'));
        
        tab.classList.add('active');
        const targetPanel = document.querySelector(`.agenda .tab-panel[data-room="${roomId}"]`);
        if (targetPanel) {
          targetPanel.classList.add('active');
        }
      });
    });
  });
</script>

<style>
  .agenda {
    padding: 5rem 0;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    position: relative;
  }

  .agenda::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="%23e0e0e0" stroke-width="0.5" opacity="0.3"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    opacity: 0.3;
  }

  .agenda .container {
    position: relative;
    z-index: 1;
  }

  .agenda h2 {
    text-align: center;
    color: var(--aws-dark-blue);
    font-size: 2.5rem;
    margin-bottom: 3rem;
    font-weight: 700;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 3rem;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    padding: 0.5rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .tab {
    background: transparent;
    border: none;
    padding: 1rem 2rem;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    color: var(--aws-dark-blue);
    border-radius: 12px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .tab::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.5s;
  }

  .tab:hover::before {
    left: 100%;
  }

  .tab:hover {
    background: rgba(255, 153, 0, 0.1);
    transform: translateY(-2px);
  }

  .tab.active {
    background: var(--aws-orange);
    color: white;
    box-shadow: 0 4px 16px rgba(255, 153, 0, 0.3);
    transform: translateY(-2px);
  }

  .tab-panel {
    display: none;
    animation: fadeIn 0.3s ease-in-out;
  }

  .tab-panel.active {
    display: block;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .sessions {
    display: grid;
    gap: 2rem;
  }

  .session-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 2rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .session-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: linear-gradient(to bottom, var(--aws-orange), var(--aws-dark-blue));
  }

  .session-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 48px rgba(0,0,0,0.15);
  }

  .session-time {
    background: linear-gradient(135deg, var(--aws-orange), #ff8c00);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 12px;
    font-weight: 700;
    white-space: nowrap;
    align-self: flex-start;
    text-align: center;
    box-shadow: 0 4px 16px rgba(255, 153, 0, 0.3);
    font-size: 0.9rem;
  }

  .session-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .session-content h3 {
    color: var(--aws-dark-blue);
    margin: 0;
    font-size: 1.4rem;
    font-weight: 700;
    line-height: 1.3;
  }

  .description {
    color: #555;
    line-height: 1.6;
    margin: 0;
    font-size: 0.95rem;
  }

  .session-meta {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: auto;
  }

  .speakers {
    color: var(--aws-dark-blue);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .speakers::before {
    content: 'ðŸ‘¥';
    font-size: 1.1rem;
  }

  .tags {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .tag {
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .tag.track {
    background: linear-gradient(135deg, var(--aws-dark-blue), #1a2332);
    color: white;
  }

  .tag.level {
    background: linear-gradient(135deg, var(--aws-orange), #ff8c00);
    color: white;
  }

  @media (max-width: 768px) {
    .agenda {
      padding: 3rem 0;
    }

    .agenda h2 {
      font-size: 2rem;
    }

    .tabs {
      flex-direction: column;
      gap: 0.5rem;
    }

    .session-card {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      padding: 1.5rem;
    }

    .session-time {
      justify-self: start;
    }

    .tags {
      gap: 0.5rem;
    }
  }
</style>